////
////  MessagesViewController.swift
////  iMessageFakeVoice MessagesExtension
////
////  Created by Mayank Tamakuwala on 6/4/23.
////
//
//import UIKit
//import Messages
//
//class MessagesViewController: MSMessagesAppViewController {
//
//    override func viewDidLoad() {
//        super.viewDidLoad()
//        // Do any additional setup after loading the view.
//    }
//
//    // MARK: - Conversation Handling
//
//    override func willBecomeActive(with conversation: MSConversation) {
//        // Called when the extension is about to move from the inactive to active state.
//        // This will happen when the extension is about to present UI.
//
//        // Use this method to configure the extension and restore previously stored state.
//    }
//
//    override func didResignActive(with conversation: MSConversation) {
//        // Called when the extension is about to move from the active to inactive state.
//        // This will happen when the user dismisses the extension, changes to a different
//        // conversation or quits Messages.
//
//        // Use this method to release shared resources, save user data, invalidate timers,
//        // and store enough state information to restore your extension to its current state
//        // in case it is terminated later.
//    }
//
//    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
//        // Called when a message arrives that was generated by another instance of this
//        // extension on a remote device.
//
//        // Use this method to trigger UI updates in response to the message.
//    }
//
//    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
//        // Called when the user taps the send button.
//    }
//
//    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
//        // Called when the user deletes the message without sending it.
//
//        // Use this to clean up state related to the deleted message.
//    }
//
//    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
//        // Called before the extension transitions to a new presentation style.
//
//        // Use this method to prepare for the change in presentation style.
//    }
//
//    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
//        // Called after the extension transitions to a new presentation style.
//
//        // Use this method to finalize any behaviors associated with the change in presentation style.
//    }
//
//}

import UIKit
import Messages
import SwiftUI
import os

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()

    }
    
    // MARK: - Conversation Handling
    func composeSelectionMsg(on conversation: MSConversation, in
                             session: MSSession) -> MSMessage {
        
        let layout = MSMessageTemplateLayout()
        layout.caption = "caption..."
        
        let message = MSMessage(session: session)
        message.layout = layout
        message.summaryText = "summary text..."
        
        var components = URLComponents()
        var queryItems = [URLQueryItem]()
        
        queryItems.append(URLQueryItem(name: "MessageType1", value: "msgType"))
        queryItems.append(URLQueryItem(name: "Encode-Name", value: "Encode-Value"))
        
        
        components.queryItems = queryItems
        message.url = components.url!
        
        return message
    }
    
    func submitMessage() {
        guard let conversation = activeConversation else {
            // os_log("submitMessage(): guard on conversation falied!", log: .default, type: .debug)
            return
        }
        var session : MSSession
        if let tSess = conversation.selectedMessage?.session {
            session = tSess
            // os_log("submitMessage() got a session!...", log: .default, type: .debug)
        } else {
            // os_log("###### submitMessage() did NOT get a session, creating new MSSession() #####", log: .default, type: .debug)
            session = MSSession()
        }
        var message: MSMessage
        
        message = composeSelectionMsg(on: conversation, in: session)

        conversation.send(message) { error in
            if let error = error {
                // os_log("submitMessage(): initial send error: %@", log: .default, type: .debug, error.localizedDescription)
            } else {
                // os_log("submitMessage(): initial send success!", log: .default, type: .debug)
            }
        }
    }
    
    fileprivate func loadContentView() {
        // os_log("loadContentView()...", log: .default, type: .debug)
        let childViewCtrl = ContentViewHostController {
            self.requestPresentationStyle(.expanded)
        }
        
        childViewCtrl.delegate = self
        childViewCtrl.view.layoutIfNeeded() // avoids snapshot warning?
        
        
        if let window = self.view.window {
            childViewCtrl.myWindow = window
            window.rootViewController = childViewCtrl
        }
    }
    
    override func willBecomeActive(with conversation: MSConversation) {
        loadContentView()
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.didTransition(to: presentationStyle)
//        if(presentationStyle == .compact){
//            DispatchQueue.main.asyncAfter(deadline: .now(), execute: {
//                self.requestPresentationStyle(.transcript)
//            })
//        }
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
//        DispatchQueue.main.asyncAfter(deadline: .now(), execute: {
//            self.requestPresentationStyle(.expanded)
//        })
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // os_log("didResignActive()...", log: .default, type: .debug)
        
    }
}

final class ContentViewHostController: UIHostingController<ContentView> {
    var delegate: ContentViewHostControllerDelegate?
    weak var myWindow: UIWindow?
    var viewRequestFunc : () -> Void
    
    init(
        viewRequestFunc: @escaping () -> Void
    ) {
        self.viewRequestFunc = viewRequestFunc
        super.init(rootView: ContentView(viewRequestFunc: viewRequestFunc))
        rootView.submitMessage = submitMessage

    }
    
    @MainActor required dynamic init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    //    required init?(coder: NSCoder) {
//        super.init(coder: coder, rootView: ContentView())
//    }
    
//    override func viewDidAppear(_ animated: Bool) {
//        super.viewDidAppear(animated)
//    }
    
    
    func submitMessage() {
        // os_log("ContentViewHostController::submitMessage(): submit message...", log: .default, type: .debug)
        delegate?.contentViewHostControllerSubmitMessage(self)
    }
}

struct ContentView: View {
    var viewRequestFunc: () -> Void
    var submitMessage: (() -> Void)?
    
    var body: some View {
        HomePage(viewRequest: viewRequestFunc)
    }
}


extension MessagesViewController: ContentViewHostControllerDelegate {
    // MARK: - ContenHost delegate
    
    func contentViewHostControllerSubmitMessage(_ controller: ContentViewHostController) {
        // os_log("delegateSubmitMessage:...")
        
        submitMessage()
    }
    
}

protocol ContentViewHostControllerDelegate {
    func contentViewHostControllerSubmitMessage( _ controller: ContentViewHostController )
}
